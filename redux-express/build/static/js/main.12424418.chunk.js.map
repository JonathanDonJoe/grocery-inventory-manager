{"version":3,"sources":["components/NavBar.js","components/ItemStock.js","actions/frozenInvUpdate.js","actions/addItemAction.js","components/AddItem.js","components/FrozenDept.js","actions/meatInvUpdate.js","components/MeatDept.js","actions/dairyInvUpdate.js","actions/getInv.js","components/DairyDept.js","actions/clearInventory.js","actions/resetInventory.js","components/Main.js","components/StoreHeader.js","App.js","reducers/frozenReducer.js","reducers/meatReducer.js","reducers/rootReducer.js","reducers/dairyReducer.js","index.js"],"names":["NavBar","className","to","Component","ItemStock","this","props","quantity","food","type","onClick","changeQuantity","index","value","operation","indexToChange","payload","dept","AddItem","state","submitItem","e","preventDefault","addItemAction","setFood","setState","target","setQuantity","Number","onSubmit","onChange","placeholder","connect","dispatch","bindActionCreators","FrozenDept","updateFrozen","frozen","frozenData","map","item","i","key","MeatDept","updateMeat","meat","meatData","a","getDairyUrl","window","apiHost","axios","get","data","console","log","DairyDept","updateDairy","getInv","dairy","dairyData","Main","frozenQuantity","reduce","b","dairyQuantity","meatQuantity","frozens","clearInventory","resetInventory","StoreHeader","App","path","component","exact","seedData","rootReducer","combineReducers","action","newState","push","theStoreWithSomeMiddleware","applyMiddleware","reduxPromise","createStore","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.12424418.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\n\nclass NavBar extends Component {\n\n    render() {\n        return(\n            <ul className='nav-bar'>\n                <li className=\"nav-item\">\n                    <Link to=\"/\" className=\"nav-link\">Store Main</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link to=\"/frozen\" className=\"nav-link\">Frozen Dept</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link to=\"/meat\" className=\"nav-link\">Meat Dept</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link to=\"/dairy\" className=\"nav-link\" >Dairy Dept</Link>\n                </li>\n            </ul>\n        )\n    }\n}\n\nexport default NavBar;","import React, { Component } from 'react';\n\nclass ItemStock extends Component {\n\n\n\n    render() { \n        return (\n            <div>\n                <h3>{this.props.quantity} {this.props.food}</h3>\n                <input className='add-button' type='button' onClick={() => {this.props.changeQuantity('+', this.props.index)}} value='+' />\n                <input className='add-button' type='button' onClick={() => {this.props.changeQuantity('-', this.props.index)}} value='-' />\n            </div>\n        );\n    }\n}\n \nexport default ItemStock;","// Action is an object with at least one property: type\n// The action is going to be handed to the dispatch, which will send that action to all reducers\n\nexport default (operation, indexToChange) => {\n    return {\n        type: 'updateFrozen',\n        payload: {\n            operation,\n            indexToChange\n        }\n    }\n}\n","export default (dept, food, quantity) => {\n    const type = `addItem-${dept}`;\n    return {\n        type: type,\n        payload: {\n            food: food, \n            quantity: quantity\n        }\n    }\n}","import React, { Component } from 'react';\nimport addItemAction from '../actions/addItemAction';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nclass AddItem extends Component {\n\n    state = {\n        food: '',\n        quantity: 0\n    }\n\n    submitItem = (e) => {\n        e.preventDefault();\n        this.props.addItemAction(this.props.dept, this.state.food, this.state.quantity);\n    }\n\n    setFood = (e) => {\n        this.setState({\n            food: e.target.value\n        })\n    }\n   \n    setQuantity = (e) => {\n        this.setState({\n            quantity: Number(e.target.value)\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.submitItem}>\n                    <input value={this.state.food} onChange={this.setFood} type='text' placeholder='FoodName' />\n                    <input value={this.state.quantity} onChange={this.setQuantity} type='number' placeholder='0' />\n                    <input type='submit' value='Submit' />\n                </form>\n            </div>\n        )\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        addItemAction: addItemAction\n    }, dispatch)\n}\n\n// export default AddItem;\n\nexport default connect(null, mapDispatchToProps)(AddItem);","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux';\nimport ItemStock from './ItemStock';\nimport updateFrozen from '../actions/frozenInvUpdate';\nimport AddItem from './AddItem';\n\nclass FrozenDept extends Component {\n\n    changeQuantity = (operation, indexToChange) => {\n        this.props.updateFrozen(operation, indexToChange)\n    }\n\n    componentDidMount() {\n        // this.props.updateFrozen([])\n    }\n\n    render() { \n        // this.props.updateFrozen([{}]);\n        const frozen = this.props.frozenData.map((item, i)=> <ItemStock key={item.food + i} quantity={item.quantity} food={item.food} changeQuantity={this.changeQuantity} index={i}/>)\n        return ( \n            <div>\n                <AddItem dept='Frozen' />\n                {frozen}\n            </div>        \n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        frozenData: state.frozen\n    }\n}\n\n// How we connect our component using this action creator to the dispatch\nfunction mapDispatchToProps(dispatch) {\n    // bindActionCreators changes updateFrozen from a function to an action creator\n    // An action creator is a function that returns an action\n    // Action has at least one property: type\n    // The dispatch will send that object to every reducer\n    return bindActionCreators({\n        updateFrozen: updateFrozen\n    }, dispatch)\n}\n\n// export default FrozenDept;\nexport default connect(mapStateToProps, mapDispatchToProps)(FrozenDept);","export default (operation, indexToChange) => {\n    return {\n        type: 'updateMeat',\n        payload: {\n            operation,\n            indexToChange\n        }\n    }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport ItemStock from './ItemStock';\nimport updateMeat from '../actions/meatInvUpdate';\nimport AddItem from './AddItem';\n\nclass MeatDept extends Component {\n\n    changeQuantity = (operation, indexToChange) => {\n        this.props.updateMeat(operation, indexToChange)\n    }\n\n    render() { \n        const meat = this.props.meatData.map((item, i)=> <ItemStock key={item.food + i} quantity={item.quantity} changeQuantity={this.changeQuantity} food={item.food} index={i} />)\n        return ( \n            <div>\n                <AddItem dept='Meat' />\n                {meat}\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    // Takes 1 arg: state.  \n\n    return {\n        meatData: state.meat\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        updateMeat: updateMeat\n    }, dispatch)\n}\n\n// export default MeatDept;\nexport default connect(mapStateToProps, mapDispatchToProps)(MeatDept);","export default (operation, indexToChange) => {\n    return {\n        type: 'updateDairy',\n        payload: {\n            operation,\n            indexToChange\n        }\n    }\n}","import axios from 'axios';\n\nexport default async (dept) => {\n    const getDairyUrl = `${window.apiHost}/dairy-inv`\n    const data = await axios.get(getDairyUrl);\n    console.log(data.data)\n    return ({\n        type:`getInv-${dept}`,\n        payload: data.data\n    })\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport ItemStock from './ItemStock';\nimport updateDairy from '../actions/dairyInvUpdate'\nimport AddItem from './AddItem';\nimport getInv from '../actions/getInv'\n\nclass DairyDept extends Component {\n\n    componentDidMount() {\n        this.props.getInv('dairy');\n    }\n\n    changeQuantity = (operation, indexToChange) => {\n        this.props.updateDairy(operation, indexToChange)\n    }\n\n    render() { \n        const dairy = this.props.dairyData.map((item, i)=> <ItemStock key={item.food + i} quantity={item.quantity} food={item.food} changeQuantity = {this.changeQuantity} index={i} />)\n        return ( \n            <div>\n                <AddItem dept='Dairy' />\n                {dairy}\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n\n    return {\n        dairyData: state.dairy\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        updateDairy: updateDairy,\n        getInv: getInv\n    }, dispatch)\n}\n\n// export default DairyDept;\nexport default connect(mapStateToProps, mapDispatchToProps)(DairyDept)","export default () => {\n    return {\n        type: 'clearInventory'\n    }\n}","export default () => {\n    return {\n        type: 'resetInventory'\n    }\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport clearInventory from '../actions/clearInventory';\nimport resetInventory from '../actions/resetInventory';\n\nclass Main extends Component {\n\n    render() { \n\n        const frozenQuantity = this.props.frozenData.reduce( (a, b) => a+b.quantity, 0)\n        const dairyQuantity = this.props.dairyData.reduce( (a, b) => a+b.quantity, 0)\n        const meatQuantity = this.props.meatData.reduce( (a, b) => a+b.quantity, 0)\n        // console.log(frozenQuantity);\n        const frozens = this.props.frozenData.map((item,i )=> <h3 key={item.food+i}>{item.quantity} {item.food}</h3>)\n        const meat = this.props.meatData.map((item,i )=> <h3 key={item.food+i}>{item.quantity} {item.food}</h3>)\n        const dairy = this.props.dairyData.map((item,i )=> <h3 key={item.food+i}>{item.quantity} {item.food}</h3>)\n\n        return ( \n            <div>\n                <h2>Total Frozen Items: {frozenQuantity}</h2>\n                <h2>Total Meat Items: {meatQuantity}</h2>\n                <h2>Total Dairy Items: {dairyQuantity}</h2>\n                <hr/>\n                {[...frozens, ...meat, ...dairy]}\n                <button onClick={this.props.clearInventory}>Clear All Inventory</button>\n                <button onClick={this.props.resetInventory}>Reset Inventory</button>\n            </div>\n        );\n    }\n}\n\nfunction mapStatetoProps(state) {\n    return {\n        frozenData: state.frozen,\n        meatData: state.meat,\n        dairyData: state.dairy\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        clearInventory: clearInventory,\n        resetInventory: resetInventory\n    }, dispatch)\n}\n\n// export default Main;\n\nexport default connect(mapStatetoProps, mapDispatchToProps) (Main)","import React, { Component } from 'react';\n\nclass StoreHeader extends Component {\n\n    render() { \n        return ( \n            <div>\n                <h1>Inventory:</h1>\n                <hr/>\n            </div>\n         );\n    }\n}\n \nexport default StoreHeader;","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport NavBar from './components/NavBar';\nimport FrozenDept from './components/FrozenDept';\nimport MeatDept from './components/MeatDept';\nimport DairyDept from './components/DairyDept';\nimport Main from './components/Main'\nimport StoreHeader from './components/StoreHeader'\n\nfunction App() {\n  return (\n\t  <Router>\n\t\t  <Route path='/' component={NavBar}></Route>\n\t\t  <Route path='/' component= {StoreHeader}></Route>\n\t\t  <Route exact path='/' component={Main}></Route>\n\t\t  <Route path='/frozen' component={FrozenDept}></Route>\n\t\t  <Route path='/meat' component={MeatDept}></Route>\n\t\t  <Route path='/dairy' component={DairyDept}></Route>\n\t  </Router>\n  );\n}\n\nexport default App;\n","//  All reducers have 2 params: Current statement (usually provide a default) and the action object\n\nconst seedData = [\n    {\n        food: 'pizza',\n        quantity: 12\n    },\n    {\n        food: 'ice cream',\n        quantity: 21\n    },\n    {\n        food: 'family dinner',\n        quantity: 5\n    },\n    {\n        food: 'frozen veggies',\n        quantity: 132\n    }\n]\n\n\n\n\nexport default(state = seedData, action) => {\n    // console.log('Frozen Reducer is running!');\n    // console.log(action.type)\n    // console.log(action.payload)\n    if (action.type === 'updateFrozen') {\n        let newState = [...state];\n        if (action.payload.operation === '+') {\n            newState[action.payload.indexToChange].quantity++;\n        } else if (action.payload.operation === '-') {\n            newState[action.payload.indexToChange].quantity--;\n        }\n        return newState;\n    } else if (action.type === 'clearInventory') {\n        return [];\n    } else if (action.type === 'resetInventory') {\n        return seedData;\n    } else if (action.type === 'addItem-Frozen') {\n        let newState = [...state];\n        const {food, quantity} = action.payload;\n        newState.push({\n            food: food,\n            quantity: quantity\n        });\n        return newState;\n    } else {\n        return state;\n    }\n}","//  All reducers have 2 params: Current statement (usually provide a default) and the action object\n\nconst seedData = [\n    {\n        food: 'steak',\n        quantity: 20\n    },\n    {\n        food: 'chicken',\n        quantity: 50\n    },\n    {\n        food: 'fish',\n        quantity: 12\n    },\n    {\n        food: 'crab',\n        quantity: 120\n    }\n]\n\nexport default(state = seedData, action) => {\n    // console.log('Meat Reducer is running!');\n    // console.log(action.type)\n    if (action.type === 'updateMeat') {\n        const newState = [...state];\n        if (action.payload.operation === '+') {\n            newState[action.payload.indexToChange].quantity++\n        } else if (action.payload.operation === '-') {\n            newState[action.payload.indexToChange].quantity--\n        }\n        return newState;\n    } else if (action.type === 'clearInventory') {\n        return [];\n    } else if (action.type === 'resetInventory') {\n        return seedData;\n    } else if (action.type === 'addItem-Meat') {\n        let newState = [...state];\n        const {food, quantity} = action.payload;\n        newState.push({\n            food: food,\n            quantity: quantity\n        });\n        return newState;\n    } else {\n        return state;\n    }\n}","// This is the root reducer\n\n// 1. Get a method from redux called 'combineReducers'\nimport { combineReducers } from 'redux';\n\n// 2. Get each individual reducer\n// The store is managed by the root reducer\n// The manager needs individual departments (reducers)\nimport frozenReducer from './frozenReducer';\nimport dairyReducer from './dairyReducer';\nimport meatReducer from './meatReducer';\n\n// 3. Call combineReducers and hand it an object.  Each key in the object will be a piece of state in the redux Store.  Each value will be the value of that piece of state in the redux store\n\nconst rootReducer = combineReducers({\n    frozen: frozenReducer,\n    dairy: dairyReducer,\n    meat: meatReducer\n})\n\nexport default rootReducer;","import { get } from \"https\";\n\n//  All reducers have 2 params: Current statement (usually provide a default) and the action object\n\n// const seedData = [\n//     {\n//         food: 'cheese',\n//         quantity: 1\n//     },\n//     {\n//         food: 'milk',\n//         quantity: 37\n//     },\n//     {\n//         food: 'yogurt',\n//         quantity: 75\n//     },\n//     {\n//         food: 'kefir',\n//         quantity: 3\n//     }\n// ]\n\n\n\n\n\nexport default(state = [], action) => {\n    // console.log('Dairy Reducer is running!');\n    // console.log(action.type)\n    if (action.type === 'updateDairy') {\n        let newState = [...state];\n        if (action.payload.operation === '+') {\n            newState[action.payload.indexToChange].quantity++\n        } else if (action.payload.operation === '-') {\n            newState[action.payload.indexToChange].quantity--\n        }\n        return newState;\n    } else if (action.type === 'clearInventory') {\n        return [];\n    } else if (action.type === 'resetInventory') {\n        return [];\n    } else if (action.type === 'addItem-Dairy') {\n        let newState = [...state];\n        const {food, quantity} = action.payload;\n        newState.push({\n            food: food,\n            quantity: quantity\n        });\n        return newState;\n    } else if (action.type === 'getInv-dairy') {\n        return action.payload;\n    } else {\n        return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reduxPromise from 'redux-promise'\n\n// 1. In order to use React with Redux, we need react-redux.\nimport { Provider } from 'react-redux';\n\n// 2. Create a redux store, so that: Redux exists and the provider has the store.\n// 2.1 Redux comes with a function called applyMiddleware\nimport { createStore, applyMiddleware } from 'redux';\n\n\n// 3. Reducers to populate the store.  Reducers go into the rootReducer.  Make individual reducers to go into the rootReducer\nimport rootReducer from './reducers/rootReducer';\n\n// 4. Actually create the store by passing it the rootReducer\n// 4.1 to use middleware, we intercept createstore\nconst theStoreWithSomeMiddleware = applyMiddleware(reduxPromise)(createStore)(rootReducer);\n\n// const aPublix = createStore(rootReducer);\n\n// Provider is the component that glues React and Redux.  We hand the provider to ReactDOM.render, and we hand the provider a prop of store\n\nReactDOM.render(\n    <Provider store = {theStoreWithSomeMiddleware}>\n        <App />\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}